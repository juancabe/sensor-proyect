import { Buffer } from 'buffer';
import { useState } from 'react';
import { PermissionsAndroid, Platform } from 'react-native';

import * as ExpoDevice from 'expo-device';

import base64 from 'react-native-base64';
import { BleManager, Device } from 'react-native-ble-plx';

const CFG_SERVICE = '4b80ba9d-64fd-4ffa-86fb-544e73d26ed1';
const READ_SENSOR_DEVICE_ID = '7af24399-6c3f-4bc3-b576-7a4f8fb59d41';
const READ_PUB_KEY_0 = 'f4f1c584-e3c0-4723-9e46-1f72b015aa88';
const READ_PUB_KEY_1 = '7d725923-ca33-41c6-9a15-821be70eac7d';

let bleManager: BleManager | null;
if (Platform.OS !== 'web') {
    bleManager = new BleManager();
} else {
    bleManager = null;
}

function useBLE() {
    const [allDevices, setAllDevices] = useState<Device[]>([]);

    const requestAndroid31Permissions = async () => {
        const bluetoothScanPermission = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
            {
                title: 'Location Permission',
                message: 'Bluetooth Low Energy requires Location',
                buttonPositive: 'OK',
            },
        );
        const bluetoothConnectPermission = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
            {
                title: 'Location Permission',
                message: 'Bluetooth Low Energy requires Location',
                buttonPositive: 'OK',
            },
        );
        const fineLocationPermission = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
            {
                title: 'Location Permission',
                message: 'Bluetooth Low Energy requires Location',
                buttonPositive: 'OK',
            },
        );

        return (
            bluetoothScanPermission === 'granted' &&
            bluetoothConnectPermission === 'granted' &&
            fineLocationPermission === 'granted'
        );
    };

    const requestPermissions = async () => {
        if (Platform.OS === 'android') {
            if ((ExpoDevice.platformApiLevel ?? -1) < 31) {
                const granted = await PermissionsAndroid.request(
                    PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
                    {
                        title: 'Location Permission',
                        message: 'Bluetooth Low Energy requires Location',
                        buttonPositive: 'OK',
                    },
                );
                return granted === PermissionsAndroid.RESULTS.GRANTED;
            } else {
                const isAndroid31PermissionsGranted = await requestAndroid31Permissions();

                return isAndroid31PermissionsGranted;
            }
        } else {
            return true;
        }
    };

    const connectToDevice = async (device: Device): Promise<DeviceRegisterInfo> => {
        if (!bleManager) {
            throw 'Unexpected no bleManager';
        }

        try {
            const deviceConnection = await bleManager.connectToDevice(device.id);
            await deviceConnection.discoverAllServicesAndCharacteristics();
            bleManager.stopDeviceScan();

            const device_uuid = await getDeviceRegisterInfo(device);
            if (!device_uuid) {
                console.log('No device_uuid read from characteristic');
                return 'No device_uuid read from characteristic';
            } else {
                console.debug('device_uuid: ', device_uuid);
            }

            throw 'Unimplemented';

            // await configureSensor(deviceConnection, username, password);
        } catch (e) {
            console.log('FAILED TO CONNECT:', e);
            return 'Unexpected error';
        }
        // No errors, we return void
        return;
    };

    const isDuplicatedDevice = (devices: Device[], nextDevice: Device) =>
        devices.findIndex((device) => nextDevice.id === device.id) > -1;

    const isHeadHexString = (hex: string): boolean => {
        const isHex = /^[0-9a-fA-F]+$/.test(hex);

        return isHex;
    };

    const scanForPeripherals = () =>
        bleManager?.startDeviceScan(null, null, (error, device) => {
            if (error) {
                console.log(error);
                return;
            }

            if (device && device.localName && isHeadHexString(device.localName)) {
                setAllDevices((prevState: Device[]) => {
                    if (!isDuplicatedDevice(prevState, device)) {
                        return [...prevState, device];
                    }
                    return prevState;
                });
            }
        });

    const stopScanForPeripherals = bleManager?.stopDeviceScan;

    // hexStr must be 40 hex chars (20 bytes)
    function encodeHexId20(hexStr: string): string {
        if (hexStr.length !== 40)
            throw new Error('Hex string must be 40 characters (20 bytes)');
        const bytes = new Uint8Array(20);
        for (let i = 0; i < 20; i++) {
            bytes[i] = parseInt(hexStr.substr(i * 2, 2), 16);
        }
        return Buffer.from(bytes).toString('base64');
    }

    // const onDataUpdate = (
    //   error: BleError | null,
    //   characteristic: Characteristic | null
    // ) => {
    //   if (error) {
    //     console.log(error);
    //     return;
    //   } else if (!characteristic?.value) {
    //     console.log("No Data was received");
    //     return;
    //   }

    //   const colorCode = base64.decode(characteristic.value);

    //   let color = "white";
    //   if (colorCode === "B") {
    //     color = "blue";
    //   } else if (colorCode === "R") {
    //     color = "red";
    //   } else if (colorCode === "G") {
    //     color = "green";
    //   }

    //   setColor(color);
    // };

    // const startStreamingData = async (device: Device) => {
    //   if (device) {
    //     device.monitorCharacteristicForService(
    //       DATA_SERVICE_UUID,
    //       SENSOR_AUTHENTICATION_CHARACTERISTIC_UUID,
    //       onDataUpdate
    //     );
    //   } else {
    //     console.log("No Device Connected");
    //   }
    // };

    interface DeviceRegisterInfo {
        sensorDeviceId: string;
        sensorPubKey: string;
    }

    const getDeviceRegisterInfo = async (
        device: Device,
    ): Promise<DeviceRegisterInfo | null> => {
        let device_id;

        try {
            device_id = (
                await device.readCharacteristicForService(
                    CFG_SERVICE,
                    READ_SENSOR_DEVICE_ID,
                )
            ).value;

            if (!device_id) {
                throw Error('device.value was null');
            }

            const arr = base64
                .decode(device_id)
                .split('')
                .map((char) => char.charCodeAt(0));

            const hexString = arr
                .map((byte) => byte.toString(16).padStart(2, '0'))
                .join('');

            device_id = hexString;
        } catch (e) {
            console.log('Exception occured on getDeviceUUID: ', e);
            return null;
        }
        let pubKey0;

        try {
            pubKey0 = (
                await device.readCharacteristicForService(CFG_SERVICE, READ_PUB_KEY_0)
            ).value;

            if (!pubKey0) {
                throw Error('device.value was null');
            }

            const arr = base64
                .decode(pubKey0)
                .split('')
                .map((char) => char.charCodeAt(0));

            const hexString = arr
                .map((byte) => byte.toString(16).padStart(2, '0'))
                .join('');

            pubKey0 = hexString;
            console.log('Read pubKey0: ', pubKey0);
        } catch (e) {
            console.log('Exception occured on getDeviceUUID: ', e);
            return null;
        }

        let pubKey1;
        try {
            pubKey1 = (
                await device.readCharacteristicForService(CFG_SERVICE, READ_PUB_KEY_1)
            ).value;

            if (!pubKey1) {
                throw Error('device.value was null');
            }

            const arr = base64
                .decode(pubKey1)
                .split('')
                .map((char) => char.charCodeAt(0));

            const hexString = arr
                .map((byte) => byte.toString(16).padStart(2, '0'))
                .join('');

            pubKey1 = hexString;
            console.log('Read pubKey1: ', pubKey1);
        } catch (e) {
            console.log('Exception occured on getDeviceUUID: ', e);
            return null;
        }

        let pubKey = pubKey0 + pubKey1.slice(0, 24);

        return { sensorDeviceId: device_id, sensorPubKey: pubKey };
    };

    // Void means no error
    // const configureSensor = async (
    //     device: Device,
    //     username: string,
    //     password: string,
    // ): Promise<string | void> => {
    //     if (!device) {
    //         console.error('No device connected');
    //         return 'Device disconnected while configuring...';
    //     }
    //     const sensorApiId = encodeHexId20(sensorApiIdHEX);
    //     const accountId = encodeHexId20(accountIdHEX);
    //
    //     // Set the sensor data using the provided API ID and account ID
    //     try {
    //         await device.writeCharacteristicWithResponseForService(
    //             CFG_SERVICE_UUID,
    //             SENSOR_API_ID_CHAR_UUID,
    //             sensorApiId,
    //         );
    //         await device.writeCharacteristicWithResponseForService(
    //             CFG_SERVICE_UUID,
    //             API_ACCOUNT_ID_CHAR_UUID,
    //             accountId,
    //         );
    //         console.log('Sensor data set successfully');
    //         return;
    //     } catch (error) {
    //         console.error('Failed to set sensor data', error);
    //         return 'Failed to set sensor data through BLE';
    //     }
    // };

    return {
        connectToDeviceAndConfigure,
        allDevices,
        requestPermissions,
        scanForPeripherals,
        stopScanForPeripherals,
        // configureSensor,
    };
}

export default useBLE;
